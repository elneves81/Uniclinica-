generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  password       String?
  accounts       Account[]
  appointments   Appointment[]
  doctor         Doctor?
  medicalRecords MedicalRecord[]
  patient        Patient?
  sessions       Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Doctor {
  id             String           @id @default(cuid())
  userId         String           @unique
  crm            String           @unique
  crmState       String
  specialty      MedicalSpecialty
  phone          String?
  address        String?
  bio            String?
  consultFee     Decimal?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  appointments   Appointment[]
  schedules      DoctorSchedule[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords MedicalRecord[]

  @@map("doctors")
}

model Patient {
  id                     String                  @id @default(cuid())
  userId                 String?                 @unique
  name                   String
  cpf                    String                  @unique
  rg                     String?
  birthDate              DateTime
  gender                 Gender
  phone                  String
  email                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  emergencyContact       String?
  emergencyPhone         String?
  allergies              String?
  medications            String?
  observations           String?
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  appointments           Appointment[]
  dermatologyRecords     DermatologyRecord[]
  generalMedicineRecords GeneralMedicineRecord[]
  gynecologyRecords      GynecologyRecord[]
  medicalRecords         MedicalRecord[]
  user                   User?                   @relation(fields: [userId], references: [id])
  payments               Payment[]
  pediatricRecords       PediatricRecord[]

  @@map("patients")
}

model Appointment {
  id            String            @id @default(cuid())
  doctorId      String
  patientId     String
  userId        String?
  date          DateTime
  duration      Int               @default(30)
  status        AppointmentStatus @default(SCHEDULED)
  type          AppointmentType   @default(CONSULTATION)
  notes         String?
  price         Decimal?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  doctor        Doctor            @relation(fields: [doctorId], references: [id])
  patient       Patient           @relation(fields: [patientId], references: [id])
  user          User?             @relation(fields: [userId], references: [id])
  medicalRecord MedicalRecord?
  payment       Payment?

  @@map("appointments")
}

model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor   @relation(fields: [doctorId], references: [id])

  @@map("doctor_schedules")
}

model MedicalRecord {
  id             String              @id @default(cuid())
  appointmentId  String?             @unique
  patientId      String
  doctorId       String
  userId         String
  date           DateTime
  chiefComplaint String
  history        String?
  physicalExam   String?
  diagnosis      String?
  treatment      String?
  prescription   String?
  observations   String?
  followUp       String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  attachments    MedicalAttachment[]
  appointment    Appointment?        @relation(fields: [appointmentId], references: [id])
  doctor         Doctor              @relation(fields: [doctorId], references: [id])
  patient        Patient             @relation(fields: [patientId], references: [id])
  user           User                @relation(fields: [userId], references: [id])

  @@map("medical_records")
}

model MedicalAttachment {
  id              String         @id @default(cuid())
  medicalRecordId String
  filename        String
  originalName    String
  mimetype        String
  size            Int
  url             String
  type            AttachmentType
  createdAt       DateTime       @default(now())
  medicalRecord   MedicalRecord  @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  @@map("medical_attachments")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String?       @unique
  patientId     String
  amount        Decimal
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime?
  paidAt        DateTime?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  patient       Patient       @relation(fields: [patientId], references: [id])

  @@map("payments")
}

model PediatricRecord {
  id             String   @id @default(cuid())
  patientId      String
  birthWeight    Decimal?
  birthHeight    Decimal?
  gestationWeeks Int?
  apgarScore     String?
  vaccinations   Json?
  growthChart    Json?
  milestones     Json?
  feedingHistory String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  patient        Patient  @relation(fields: [patientId], references: [id])

  @@map("pediatric_records")
}

model DermatologyRecord {
  id                 String   @id @default(cuid())
  patientId          String
  skinType           Int?
  familyHistory      String?
  personalHistory    String?
  currentMedications String?
  allergies          String?
  bodyMap            Json?
  dermoscopyImages   Json?
  lesionTracking     Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  patient            Patient  @relation(fields: [patientId], references: [id])

  @@map("dermatology_records")
}

model GynecologyRecord {
  id                 String    @id @default(cuid())
  patientId          String
  menarche           Int?
  menstrualCycle     String?
  lastMenstruation   DateTime?
  pregnancies        Int       @default(0)
  deliveries         Int       @default(0)
  abortions          Int       @default(0)
  contraceptive      String?
  gynecologicalExams Json?
  mammography        Json?
  papSmear           Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  patient            Patient   @relation(fields: [patientId], references: [id])

  @@map("gynecology_records")
}

model GeneralMedicineRecord {
  id              String   @id @default(cuid())
  patientId       String
  bloodPressure   String?
  heartRate       Int?
  temperature     Decimal?
  weight          Decimal?
  height          Decimal?
  bmi             Decimal?
  chronicDiseases Json?
  familyHistory   String?
  socialHistory   String?
  labResults      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  patient         Patient  @relation(fields: [patientId], references: [id])

  @@map("general_medicine_records")
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
  RECEPTIONIST
}

enum MedicalSpecialty {
  GENERAL_MEDICINE
  PEDIATRICS
  DERMATOLOGY
  GYNECOLOGY
  CARDIOLOGY
  ORTHOPEDICS
  NEUROLOGY
  PSYCHIATRY
  OPHTHALMOLOGY
  OTOLARYNGOLOGY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  EXAM
  PROCEDURE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  INSURANCE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  EXAM_RESULT
  PRESCRIPTION
  REPORT
}
